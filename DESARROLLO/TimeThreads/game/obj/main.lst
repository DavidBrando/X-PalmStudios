                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _teclado
                             13 	.globl _cambiaEstado
                             14 	.globl _inicializar
                             15 	.globl _muerteJug
                             16 	.globl _fin
                             17 	.globl _presenta
                             18 	.globl _inicializar_borracho
                             19 	.globl _ejecutar_jugador
                             20 	.globl _get_mapa
                             21 	.globl _get_X
                             22 	.globl _inicializar_jugador
                             23 	.globl _cpct_etm_setTileset2x4
                             24 	.globl _cpct_setPALColour
                             25 	.globl _cpct_setPalette
                             26 	.globl _cpct_waitVSYNC
                             27 	.globl _cpct_setVideoMode
                             28 	.globl _cpct_drawStringM0
                             29 	.globl _cpct_drawSprite
                             30 	.globl _cpct_isKeyPressed
                             31 	.globl _cpct_scanKeyboard_f
                             32 	.globl _cpct_memset
                             33 	.globl _cpct_disableFirmware
                             34 	.globl _estados
                             35 ;--------------------------------------------------------
                             36 ; special function registers
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _DATA
   0000                      42 _estados::
   0000                      43 	.ds 1
                             44 ;--------------------------------------------------------
                             45 ; ram data
                             46 ;--------------------------------------------------------
                             47 	.area _INITIALIZED
                             48 ;--------------------------------------------------------
                             49 ; absolute external ram data
                             50 ;--------------------------------------------------------
                             51 	.area _DABS (ABS)
                             52 ;--------------------------------------------------------
                             53 ; global & static initialisations
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _GSINIT
                             57 	.area _GSFINAL
                             58 	.area _GSINIT
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _HOME
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area _CODE
                             68 ;src/main.c:36: void presenta()
                             69 ;	---------------------------------
                             70 ; Function presenta
                             71 ; ---------------------------------
   0000                      72 _presenta::
                             73 ;src/main.c:38: cpct_drawSprite(g_async, TITULO, G_ASYNC_W, G_ASYNC_H);
   0000 21 20 18      [10]   74 	ld	hl,#0x1820
   0003 E5            [11]   75 	push	hl
   0004 21 38 C3      [10]   76 	ld	hl,#0xC338
   0007 E5            [11]   77 	push	hl
   0008 21r00r00      [10]   78 	ld	hl,#_g_async
   000B E5            [11]   79 	push	hl
   000C CDr00r00      [17]   80 	call	_cpct_drawSprite
                             81 ;src/main.c:39: cpct_drawStringM0("Presenta", PRESEN, 1, 0);
   000F 21 01 00      [10]   82 	ld	hl,#0x0001
   0012 E5            [11]   83 	push	hl
   0013 21 28 F4      [10]   84 	ld	hl,#0xF428
   0016 E5            [11]   85 	push	hl
   0017 21r4Cr00      [10]   86 	ld	hl,#___str_0
   001A E5            [11]   87 	push	hl
   001B CDr00r00      [17]   88 	call	_cpct_drawStringM0
   001E 21 06 00      [10]   89 	ld	hl,#6
   0021 39            [11]   90 	add	hl,sp
   0022 F9            [ 6]   91 	ld	sp,hl
                             92 ;src/main.c:40: cpct_drawStringM0 ("PLEASE!", SCREEN, 3, 0);
   0023 21 03 00      [10]   93 	ld	hl,#0x0003
   0026 E5            [11]   94 	push	hl
   0027 21 BB F5      [10]   95 	ld	hl,#0xF5BB
   002A E5            [11]   96 	push	hl
   002B 21r55r00      [10]   97 	ld	hl,#___str_1
   002E E5            [11]   98 	push	hl
   002F CDr00r00      [17]   99 	call	_cpct_drawStringM0
   0032 21 06 00      [10]  100 	ld	hl,#6
   0035 39            [11]  101 	add	hl,sp
   0036 F9            [ 6]  102 	ld	sp,hl
                            103 ;src/main.c:41: cpct_drawStringM0 ("PRESS INTRO!", SCREEN2, 3, 0);
   0037 21 03 00      [10]  104 	ld	hl,#0x0003
   003A E5            [11]  105 	push	hl
   003B 21 51 C6      [10]  106 	ld	hl,#0xC651
   003E E5            [11]  107 	push	hl
   003F 21r5Dr00      [10]  108 	ld	hl,#___str_2
   0042 E5            [11]  109 	push	hl
   0043 CDr00r00      [17]  110 	call	_cpct_drawStringM0
   0046 21 06 00      [10]  111 	ld	hl,#6
   0049 39            [11]  112 	add	hl,sp
   004A F9            [ 6]  113 	ld	sp,hl
   004B C9            [10]  114 	ret
   004C                     115 ___str_0:
   004C 50 72 65 73 65 6E   116 	.ascii "Presenta"
        74 61
   0054 00                  117 	.db 0x00
   0055                     118 ___str_1:
   0055 50 4C 45 41 53 45   119 	.ascii "PLEASE!"
        21
   005C 00                  120 	.db 0x00
   005D                     121 ___str_2:
   005D 50 52 45 53 53 20   122 	.ascii "PRESS INTRO!"
        49 4E 54 52 4F 21
   0069 00                  123 	.db 0x00
                            124 ;src/main.c:45: u8 fin()
                            125 ;	---------------------------------
                            126 ; Function fin
                            127 ; ---------------------------------
   006A                     128 _fin::
                            129 ;src/main.c:47: u8 mapa=get_mapa();
   006A CDr00r00      [17]  130 	call	_get_mapa
                            131 ;src/main.c:48: u8 x=get_X();
   006D E5            [11]  132 	push	hl
   006E CDr00r00      [17]  133 	call	_get_X
   0071 45            [ 4]  134 	ld	b,l
   0072 E1            [10]  135 	pop	hl
                            136 ;src/main.c:49: u8 t=0;
   0073 0E 00         [ 7]  137 	ld	c,#0x00
                            138 ;src/main.c:50: if(mapa==6&& x==74)
   0075 7D            [ 4]  139 	ld	a,l
   0076 D6 06         [ 7]  140 	sub	a, #0x06
   0078 20 19         [12]  141 	jr	NZ,00102$
   007A 78            [ 4]  142 	ld	a,b
   007B D6 4A         [ 7]  143 	sub	a, #0x4A
   007D 20 14         [12]  144 	jr	NZ,00102$
                            145 ;src/main.c:52: cpct_clearScreen(0);
   007F 21 00 40      [10]  146 	ld	hl,#0x4000
   0082 E5            [11]  147 	push	hl
   0083 AF            [ 4]  148 	xor	a, a
   0084 F5            [11]  149 	push	af
   0085 33            [ 6]  150 	inc	sp
   0086 26 C0         [ 7]  151 	ld	h, #0xC0
   0088 E5            [11]  152 	push	hl
   0089 CDr00r00      [17]  153 	call	_cpct_memset
                            154 ;src/main.c:53: estados=2;
   008C 21r00r00      [10]  155 	ld	hl,#_estados + 0
   008F 36 02         [10]  156 	ld	(hl), #0x02
                            157 ;src/main.c:54: t=1;
   0091 0E 01         [ 7]  158 	ld	c,#0x01
   0093                     159 00102$:
                            160 ;src/main.c:56: return t;
   0093 69            [ 4]  161 	ld	l,c
   0094 C9            [10]  162 	ret
                            163 ;src/main.c:59: u8 muerteJug()
                            164 ;	---------------------------------
                            165 ; Function muerteJug
                            166 ; ---------------------------------
   0095                     167 _muerteJug::
                            168 ;src/main.c:61: u8 vida=get_vida();
   0095 CDr00r00      [17]  169 	call	_get_vida
                            170 ;src/main.c:62: u8 v=0;
                            171 ;src/main.c:63: if(vida<=0)
   0098 7D            [ 4]  172 	ld	a, l
   0099 2E 00         [ 7]  173 	ld	l, #0x00
   009B B7            [ 4]  174 	or	a, a
   009C C0            [11]  175 	ret	NZ
                            176 ;src/main.c:65: cpct_clearScreen(0);
   009D 21 00 40      [10]  177 	ld	hl,#0x4000
   00A0 E5            [11]  178 	push	hl
   00A1 AF            [ 4]  179 	xor	a, a
   00A2 F5            [11]  180 	push	af
   00A3 33            [ 6]  181 	inc	sp
   00A4 26 C0         [ 7]  182 	ld	h, #0xC0
   00A6 E5            [11]  183 	push	hl
   00A7 CDr00r00      [17]  184 	call	_cpct_memset
                            185 ;src/main.c:66: estados=3;
   00AA 21r00r00      [10]  186 	ld	hl,#_estados + 0
   00AD 36 03         [10]  187 	ld	(hl), #0x03
                            188 ;src/main.c:67: v=1;
   00AF 2E 01         [ 7]  189 	ld	l,#0x01
                            190 ;src/main.c:69: return v;
   00B1 C9            [10]  191 	ret
                            192 ;src/main.c:71: void inicializar()
                            193 ;	---------------------------------
                            194 ; Function inicializar
                            195 ; ---------------------------------
   00B2                     196 _inicializar::
                            197 ;src/main.c:73: cpct_disableFirmware();
   00B2 CDr00r00      [17]  198 	call	_cpct_disableFirmware
                            199 ;src/main.c:74: cpct_setVideoMode(0);
   00B5 2E 00         [ 7]  200 	ld	l,#0x00
   00B7 CDr00r00      [17]  201 	call	_cpct_setVideoMode
                            202 ;src/main.c:75: cpct_setBorder(HW_BLACK);
   00BA 21 10 14      [10]  203 	ld	hl,#0x1410
   00BD E5            [11]  204 	push	hl
   00BE CDr00r00      [17]  205 	call	_cpct_setPALColour
                            206 ;src/main.c:76: cpct_setPalette(g_palette,16);
   00C1 21 10 00      [10]  207 	ld	hl,#0x0010
   00C4 E5            [11]  208 	push	hl
   00C5 21r00r00      [10]  209 	ld	hl,#_g_palette
   00C8 E5            [11]  210 	push	hl
   00C9 CDr00r00      [17]  211 	call	_cpct_setPalette
                            212 ;src/main.c:77: cpct_etm_setTileset2x4(g_tileset);
   00CC 21r00r00      [10]  213 	ld	hl,#_g_tileset
   00CF CDr00r00      [17]  214 	call	_cpct_etm_setTileset2x4
                            215 ;src/main.c:78: estados=0;
   00D2 21r00r00      [10]  216 	ld	hl,#_estados + 0
   00D5 36 00         [10]  217 	ld	(hl), #0x00
   00D7 C9            [10]  218 	ret
                            219 ;src/main.c:81: void cambiaEstado(u8 state)
                            220 ;	---------------------------------
                            221 ; Function cambiaEstado
                            222 ; ---------------------------------
   00D8                     223 _cambiaEstado::
                            224 ;src/main.c:83: estados=state;
   00D8 21 02 00      [10]  225 	ld	hl, #2+0
   00DB 39            [11]  226 	add	hl, sp
   00DC 7E            [ 7]  227 	ld	a, (hl)
   00DD 32r00r00      [13]  228 	ld	(#_estados + 0),a
   00E0 C9            [10]  229 	ret
                            230 ;src/main.c:86: void teclado(u8 k)
                            231 ;	---------------------------------
                            232 ; Function teclado
                            233 ; ---------------------------------
   00E1                     234 _teclado::
                            235 ;src/main.c:88: cpct_scanKeyboard_f();
   00E1 CDr00r00      [17]  236 	call	_cpct_scanKeyboard_f
                            237 ;src/main.c:89: if ( cpct_isKeyPressed(Key_Return)) {
   00E4 21 02 04      [10]  238 	ld	hl,#0x0402
   00E7 CDr00r00      [17]  239 	call	_cpct_isKeyPressed
   00EA 7D            [ 4]  240 	ld	a,l
   00EB B7            [ 4]  241 	or	a, a
   00EC C8            [11]  242 	ret	Z
                            243 ;src/main.c:90: if(k==0)
   00ED 21 02 00      [10]  244 	ld	hl, #2+0
   00F0 39            [11]  245 	add	hl, sp
   00F1 7E            [ 7]  246 	ld	a, (hl)
   00F2 B7            [ 4]  247 	or	a, a
   00F3 20 12         [12]  248 	jr	NZ,00102$
                            249 ;src/main.c:92: estados=1;
   00F5 21r00r00      [10]  250 	ld	hl,#_estados + 0
   00F8 36 01         [10]  251 	ld	(hl), #0x01
                            252 ;src/main.c:93: cpct_clearScreen(0);
   00FA 21 00 40      [10]  253 	ld	hl,#0x4000
   00FD E5            [11]  254 	push	hl
   00FE AF            [ 4]  255 	xor	a, a
   00FF F5            [11]  256 	push	af
   0100 33            [ 6]  257 	inc	sp
   0101 26 C0         [ 7]  258 	ld	h, #0xC0
   0103 E5            [11]  259 	push	hl
   0104 CDr00r00      [17]  260 	call	_cpct_memset
   0107                     261 00102$:
                            262 ;src/main.c:96: if(k==1)
   0107 21 02 00      [10]  263 	ld	hl, #2+0
   010A 39            [11]  264 	add	hl, sp
   010B 7E            [ 7]  265 	ld	a, (hl)
   010C 3D            [ 4]  266 	dec	a
   010D 20 05         [12]  267 	jr	NZ,00104$
                            268 ;src/main.c:99: estados=2;
   010F 21r00r00      [10]  269 	ld	hl,#_estados + 0
   0112 36 02         [10]  270 	ld	(hl), #0x02
   0114                     271 00104$:
                            272 ;src/main.c:102: if(k==2||k==3)
   0114 FD 21 02 00   [14]  273 	ld	iy,#2
   0118 FD 39         [15]  274 	add	iy,sp
   011A FD 7E 00      [19]  275 	ld	a,0 (iy)
   011D D6 02         [ 7]  276 	sub	a, #0x02
   011F 28 06         [12]  277 	jr	Z,00105$
   0121 FD 7E 00      [19]  278 	ld	a,0 (iy)
   0124 D6 03         [ 7]  279 	sub	a, #0x03
   0126 C0            [11]  280 	ret	NZ
   0127                     281 00105$:
                            282 ;src/main.c:104: estados=0;
   0127 21r00r00      [10]  283 	ld	hl,#_estados + 0
   012A 36 00         [10]  284 	ld	(hl), #0x00
   012C C9            [10]  285 	ret
                            286 ;src/main.c:110: void main(void) {
                            287 ;	---------------------------------
                            288 ; Function main
                            289 ; ---------------------------------
   012D                     290 _main::
                            291 ;src/main.c:111: inicializar();
   012D CDrB2r00      [17]  292 	call	_inicializar
                            293 ;src/main.c:112: while(1)
   0130                     294 00107$:
                            295 ;src/main.c:115: switch(estados)
   0130 3E 03         [ 7]  296 	ld	a,#0x03
   0132 FD 21r00r00   [14]  297 	ld	iy,#_estados
   0136 FD 96 00      [19]  298 	sub	a, 0 (iy)
   0139 38 F5         [12]  299 	jr	C,00107$
   013B FD 21r00r00   [14]  300 	ld	iy,#_estados
   013F FD 5E 00      [19]  301 	ld	e,0 (iy)
   0142 16 00         [ 7]  302 	ld	d,#0x00
   0144 21r4Ar01      [10]  303 	ld	hl,#00119$
   0147 19            [11]  304 	add	hl,de
   0148 19            [11]  305 	add	hl,de
                            306 ;src/main.c:117: case 0: 
   0149 E9            [ 4]  307 	jp	(hl)
   014A                     308 00119$:
   014A 18 06         [12]  309 	jr	00101$
   014C 18 12         [12]  310 	jr	00102$
   014E 18 28         [12]  311 	jr	00103$
   0150 18 5D         [12]  312 	jr	00104$
   0152                     313 00101$:
                            314 ;src/main.c:118: presenta();
   0152 CDr00r00      [17]  315 	call	_presenta
                            316 ;src/main.c:119: teclado(estados);
   0155 3Ar00r00      [13]  317 	ld	a,(_estados)
   0158 F5            [11]  318 	push	af
   0159 33            [ 6]  319 	inc	sp
   015A CDrE1r00      [17]  320 	call	_teclado
   015D 33            [ 6]  321 	inc	sp
                            322 ;src/main.c:122: break;
   015E 18 D0         [12]  323 	jr	00107$
                            324 ;src/main.c:123: case 1:
   0160                     325 00102$:
                            326 ;src/main.c:124: cpct_clearScreen(0);
   0160 21 00 40      [10]  327 	ld	hl,#0x4000
   0163 E5            [11]  328 	push	hl
   0164 AF            [ 4]  329 	xor	a, a
   0165 F5            [11]  330 	push	af
   0166 33            [ 6]  331 	inc	sp
   0167 26 C0         [ 7]  332 	ld	h, #0xC0
   0169 E5            [11]  333 	push	hl
   016A CDr00r00      [17]  334 	call	_cpct_memset
                            335 ;src/main.c:125: inicializar_jugador();
   016D CDr00r00      [17]  336 	call	_inicializar_jugador
                            337 ;src/main.c:126: inicializar_borracho();
   0170 CDr00r00      [17]  338 	call	_inicializar_borracho
                            339 ;src/main.c:127: ejecutar_jugador();
   0173 CDr00r00      [17]  340 	call	_ejecutar_jugador
                            341 ;src/main.c:128: break;
   0176 18 B8         [12]  342 	jr	00107$
                            343 ;src/main.c:130: case 2:
   0178                     344 00103$:
                            345 ;src/main.c:132: cpct_drawStringM0 ("THE END", FIN, 4, 0);
   0178 21 04 00      [10]  346 	ld	hl,#0x0004
   017B E5            [11]  347 	push	hl
   017C 21 E9 DA      [10]  348 	ld	hl,#0xDAE9
   017F E5            [11]  349 	push	hl
   0180 21rE6r01      [10]  350 	ld	hl,#___str_3
   0183 E5            [11]  351 	push	hl
   0184 CDr00r00      [17]  352 	call	_cpct_drawStringM0
   0187 21 06 00      [10]  353 	ld	hl,#6
   018A 39            [11]  354 	add	hl,sp
   018B F9            [ 6]  355 	ld	sp,hl
                            356 ;src/main.c:133: cpct_drawStringM0 ("PRESS ENTER!!", CONTINUE, 4, 0);
   018C 21 04 00      [10]  357 	ld	hl,#0x0004
   018F E5            [11]  358 	push	hl
   0190 21 2E EB      [10]  359 	ld	hl,#0xEB2E
   0193 E5            [11]  360 	push	hl
   0194 21rEEr01      [10]  361 	ld	hl,#___str_4
   0197 E5            [11]  362 	push	hl
   0198 CDr00r00      [17]  363 	call	_cpct_drawStringM0
   019B 21 06 00      [10]  364 	ld	hl,#6
   019E 39            [11]  365 	add	hl,sp
   019F F9            [ 6]  366 	ld	sp,hl
                            367 ;src/main.c:134: cpct_waitVSYNC();
   01A0 CDr00r00      [17]  368 	call	_cpct_waitVSYNC
                            369 ;src/main.c:135: teclado(estados);
   01A3 3Ar00r00      [13]  370 	ld	a,(_estados)
   01A6 F5            [11]  371 	push	af
   01A7 33            [ 6]  372 	inc	sp
   01A8 CDrE1r00      [17]  373 	call	_teclado
   01AB 33            [ 6]  374 	inc	sp
                            375 ;src/main.c:136: break;
   01AC C3r30r01      [10]  376 	jp	00107$
                            377 ;src/main.c:138: case 3:
   01AF                     378 00104$:
                            379 ;src/main.c:139: cpct_drawStringM0 ("YOUR PLAYER HAS DIED", DIED, 4, 0);
   01AF 21 04 00      [10]  380 	ld	hl,#0x0004
   01B2 E5            [11]  381 	push	hl
   01B3 21 E0 F9      [10]  382 	ld	hl,#0xF9E0
   01B6 E5            [11]  383 	push	hl
   01B7 21rFCr01      [10]  384 	ld	hl,#___str_5
   01BA E5            [11]  385 	push	hl
   01BB CDr00r00      [17]  386 	call	_cpct_drawStringM0
   01BE 21 06 00      [10]  387 	ld	hl,#6
   01C1 39            [11]  388 	add	hl,sp
   01C2 F9            [ 6]  389 	ld	sp,hl
                            390 ;src/main.c:140: cpct_drawStringM0 ("PRESS ENTER!!", CONTINUE, 4, 0);
   01C3 21 04 00      [10]  391 	ld	hl,#0x0004
   01C6 E5            [11]  392 	push	hl
   01C7 21 2E EB      [10]  393 	ld	hl,#0xEB2E
   01CA E5            [11]  394 	push	hl
   01CB 21rEEr01      [10]  395 	ld	hl,#___str_4
   01CE E5            [11]  396 	push	hl
   01CF CDr00r00      [17]  397 	call	_cpct_drawStringM0
   01D2 21 06 00      [10]  398 	ld	hl,#6
   01D5 39            [11]  399 	add	hl,sp
   01D6 F9            [ 6]  400 	ld	sp,hl
                            401 ;src/main.c:141: cpct_waitVSYNC();
   01D7 CDr00r00      [17]  402 	call	_cpct_waitVSYNC
                            403 ;src/main.c:142: teclado(estados);
   01DA 3Ar00r00      [13]  404 	ld	a,(_estados)
   01DD F5            [11]  405 	push	af
   01DE 33            [ 6]  406 	inc	sp
   01DF CDrE1r00      [17]  407 	call	_teclado
   01E2 33            [ 6]  408 	inc	sp
                            409 ;src/main.c:144: }
   01E3 C3r30r01      [10]  410 	jp	00107$
   01E6                     411 ___str_3:
   01E6 54 48 45 20 45 4E   412 	.ascii "THE END"
        44
   01ED 00                  413 	.db 0x00
   01EE                     414 ___str_4:
   01EE 50 52 45 53 53 20   415 	.ascii "PRESS ENTER!!"
        45 4E 54 45 52 21
        21
   01FB 00                  416 	.db 0x00
   01FC                     417 ___str_5:
   01FC 59 4F 55 52 20 50   418 	.ascii "YOUR PLAYER HAS DIED"
        4C 41 59 45 52 20
        48 41 53 20 44 49
        45 44
   0210 00                  419 	.db 0x00
                            420 	.area _CODE
                            421 	.area _INITIALIZER
                            422 	.area _CABS (ABS)
